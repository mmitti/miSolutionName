<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Experiment" xml:space="preserve">
    <value>試験機能</value>
  </data>
  <data name="100" xml:space="preserve">
    <value>環境</value>
  </data>
  <data name="DefaultColor" xml:space="preserve">
    <value>デフォルトの配色</value>
  </data>
  <data name="ActiveBackgroundDescription" xml:space="preserve">
    <value>ウィンドウがアクティブのときの背景色。 デフォルト:#d9e0f8</value>
  </data>
  <data name="ActiveForegroundDescription" xml:space="preserve">
    <value>ウィンドウがアクティブのときのテキスト色。 デフォルト:#40568d</value>
  </data>
  <data name="InActiveBackgroundDescription" xml:space="preserve">
    <value>ウィンドウが非アクティブのときの背景色。 デフォルト:#ffffff</value>
  </data>
  <data name="InActiveForegroundDescription" xml:space="preserve">
    <value>ウィンドウが非アクティブのときのテキスト色。 デフォルト:#666666</value>
  </data>
  <data name="Color" xml:space="preserve">
    <value>配色</value>
  </data>
  <data name="EditorColorDescription" xml:space="preserve">
    <value>.suo固有の配色設定。空欄にした場合はVisual Studioの設定で指定するデフォルト配色やVSCodeの設定ファイルが利用されます。</value>
  </data>
  <data name="EditorDescription" xml:space="preserve">
    <value>ソリューションユーザーオプションファイル(.suo)固有の設定を変更します。こちらが設定されている場合、Visual Studioの設定より優先されて適用されます。</value>
  </data>
  <data name="EditorEnable" xml:space="preserve">
    <value>.suoに格納されている設定を有効にする</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>全般</value>
  </data>
  <data name="EditorAcriveBackgroundDescription" xml:space="preserve">
    <value>ウィンドウがアクティブのときの背景色 例:#d9e0f8</value>
  </data>
  <data name="EditorAcriveForegroundDescription" xml:space="preserve">
    <value>ウィンドウがアクティブのときのテキスト色 例:#40568d</value>
  </data>
  <data name="EditorInAcriveBackgroundDescription" xml:space="preserve">
    <value>ウィンドウが非アクティブのときの背景色 例:#ffffff</value>
  </data>
  <data name="EditorInAcriveForegroundDescription" xml:space="preserve">
    <value>ウィンドウが非アクティブのときのテキスト色 例:#666666</value>
  </data>
  <data name="EditorLoadVSCConfig" xml:space="preserve">
    <value>VSCodeの設定やワークスペースを探索し、設定ファイルを読み込みます。</value>
  </data>
  <data name="Finding" xml:space="preserve">
    <value>探索中</value>
  </data>
  <data name="LoadedVSCSetting" xml:space="preserve">
    <value>VSCodeの設定ファイルが見つかりました</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>見つかりませんでした</value>
  </data>
</root>